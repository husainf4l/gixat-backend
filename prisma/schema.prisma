generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User and Company Models
model User {
    id        String   @id @default(cuid())
    mobile    String   @unique
    name      String
    password  String // Store hashed password
    role      UserRole
    company   Company? @relation(fields: [companyId], references: [id])
    companyId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Company {
    id                     String    @id @default(cuid())
    name                   String
    users                  User[]
    address                Address   @relation(fields: [addressId], references: [id])
    addressId              String
    quickbooksToken        String?
    quickbooksRefreshToken String?
    quickbooksTokenExpiry  DateTime?
}

model Address {
    id                String              @id @default(cuid())
    street            String
    city              String
    country           String
    company           Company[]
    AccountReceivable AccountReceivable[]
}

model ChartOfAccount {
    id                 String                @id @default(uuid())
    name               String                @unique
    accountNumber      String?               @unique
    classification     AccountClassification
    accountType        AccountType
    parentAccountId    String?               @db.VarChar(36)
    parentAccount      ChartOfAccount?       @relation("SubAccounts", fields: [parentAccountId], references: [id])
    subAccounts        ChartOfAccount[]      @relation("SubAccounts")
    transactions       JournalEntry[]        @relation("AccountTransactions")
    accountReceivables AccountReceivable[]
    accountPayables    AccountPayable[]
    inventoryItems     InventoryItem[]
    balance            Float                 @default(0)
    createdAt          DateTime              @default(now())
    updatedAt          DateTime              @updatedAt
    journalLines       JournalLine[]         @relation("AccountTransactions")
}

model JournalEntry {
    id              String           @id @default(uuid())
    transactionDate DateTime
    description     String
    journalLines    JournalLine[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    accounts        ChartOfAccount[] @relation("AccountTransactions")
}

model JournalLine {
    id        String         @id @default(uuid())
    entryId   String
    entry     JournalEntry   @relation(fields: [entryId], references: [id])
    accountId String
    account   ChartOfAccount @relation("AccountTransactions", fields: [accountId], references: [id])
    debit     Float          @default(0)
    credit    Float          @default(0)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

model AccountReceivable {
    id             String         @id @default(uuid())
    clientName     String
    companyName    String?
    taxId          String?
    phoneNumber    String         @unique
    email          String?
    notes          String?
    chartAccountId String
    chartAccount   ChartOfAccount @relation(fields: [chartAccountId], references: [id])
    invoices       Invoice[]
    Car            Car[]
    address        Address        @relation(fields: [addressId], references: [id])
    addressId      String
    JobCard        JobCard[]
    companyId      String? 
}

model AccountPayable {
    id             String          @id @default(uuid())
    supplierName   String
    accountId      String
    account        ChartOfAccount  @relation(fields: [accountId], references: [id])
    purchases      PurchaseOrder[]
    inventoryItems InventoryItem[] @relation("SupplierAccount")
}

model Invoice {
    id        String            @id @default(uuid())
    accountId String
    account   AccountReceivable @relation(fields: [accountId], references: [id])
    amount    Float
    dueDate   DateTime
    paidDate  DateTime?
    status    InvoiceStatus
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt
}

model PurchaseOrder {
    id             String              @id @default(uuid())
    accountId      String
    account        AccountPayable      @relation(fields: [accountId], references: [id])
    amount         Float
    orderDate      DateTime
    receivedDate   DateTime?
    paymentDate    DateTime?
    status         PurchaseOrderStatus
    createdAt      DateTime            @default(now())
    updatedAt      DateTime            @updatedAt
    inventoryItems InventoryItem[]     @relation("InventoryPurchases")
}

// Inventory Management
model InventoryItem {
    id                String                 @id @default(cuid())
    name              String
    quantity          Int
    unitPrice         Float
    cost              Float
    sellingPrice      Float
    status            InventoryStatus        @default(IN_STOCK)
    reorderLevel      Int
    lastRestocked     DateTime?
    location          String?
    barcode           String?
    sku               String?
    unitOfMeasure     String?
    minOrderQuantity  Int?
    batchNumber       String?
    categoryId        String
    description       String?
    category          Category               @relation(fields: [categoryId], references: [id])
    supplierAccountId String
    supplierAccount   AccountPayable         @relation("SupplierAccount", fields: [supplierAccountId], references: [id])
    purchases         PurchaseOrder[]        @relation("InventoryPurchases")
    transactions      InventoryTransaction[]
    assetAccountId    String
    assetAccount      ChartOfAccount         @relation(fields: [assetAccountId], references: [id])
}

model InventoryTransaction {
    id              String          @id @default(cuid())
    inventoryItemId String
    inventoryItem   InventoryItem   @relation(fields: [inventoryItemId], references: [id])
    transactionDate DateTime        @default(now())
    transactionType TransactionType
    quantityChanged Int
    newQuantity     Int
    description     String
}

model Category {
    id               String          @id @default(cuid())
    name             String
    description      String?
    parentCategoryId String?
    parentCategory   Category?       @relation("Subcategories", fields: [parentCategoryId], references: [id])
    subcategories    Category[]      @relation("Subcategories")
    items            InventoryItem[]
}

// Car and Repair Management
model Car {
    id               String            @id @default(cuid())
    makeId           String
    modelId          String
    year             Int
    vin              String?           @unique
    licenseNumber    String?
    transmissionType TransmissionType
    clientAccountId  String
    clientAccount    AccountReceivable @relation(fields: [clientAccountId], references: [id])
    make             Make              @relation(fields: [makeId], references: [id])
    model            Model             @relation(fields: [modelId], references: [id])
    notes            String?
    history          CarHistory[]
    inspections      Inspection[]
    jobCards         JobCard[]
}

model Make {
    id     String  @id @default(cuid())
    name   String  @unique
    models Model[]
    cars   Car[]
}

model Model {
    id     String @id @default(cuid())
    name   String @unique
    makeId String
    make   Make   @relation(fields: [makeId], references: [id])
    cars   Car[]
}

model CarHistory {
    id      String   @id @default(cuid())
    carId   String
    date    DateTime
    event   String
    details String?
    car     Car      @relation(fields: [carId], references: [id])
}

model Inspection {
    id            String   @id @default(cuid())
    carId         String
    date          DateTime
    odoReading    Int
    color         String?
    imageUrl      String?
    notes         String?
    inspectorName String?
    car           Car      @relation(fields: [carId], references: [id])
}

model JobCard {
    id                 String             @id @default(cuid())
    carId              String
    date               DateTime
    description        String
    cost               Float?
    totalLabor         Float?
    totalParts         Float?
    totalCost          Float?
    clientId           String?
    client             AccountReceivable? @relation(fields: [clientId], references: [id])
    car                Car                @relation(fields: [carId], references: [id])
    partsUsed          Part[]
    assignedTechnician Technician?        @relation(fields: [technicianId], references: [id])
    technicianId       String?
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    duration           Int? // Duration in minutes, can be null if the job is not completed
    Board              BoardStatus?       @relation(fields: [boardId], references: [id])
    boardId            String?
}

model Part {
    id        String  @id @default(cuid())
    name      String
    quantity  Int
    cost      Float
    jobCard   JobCard @relation(fields: [jobCardId], references: [id])
    jobCardId String
}

model Technician {
    id              String          @id @default(cuid())
    name            String
    experienceLevel ExperienceLevel
    jobCards        JobCard[]
}

model BoardStatus {
    id        String    @id @default(uuid())
    companyId String
    status    String
    priority  Int       @default(autoincrement())
    jobCards  JobCard[]
}

// Enums
enum UserRole {
    ADMIN
    EMPLOYEE
}

enum AccountClassification {
    ASSET
    LIABILITY
    EQUITY
    REVENUE
    EXPENSE
}

enum AccountType {
    CURRENT_ASSET
    FIXED_ASSET
    CURRENT_LIABILITY
    LONG_TERM_LIABILITY
    EQUITY
    REVENUE
    EXPENSE
    COST_OF_GOODS_SOLD
    OTHER_INCOME
    OTHER_EXPENSE
}

enum PurchaseOrderStatus {
    ORDERED
    RECEIVED
    PENDING_PAYMENT
}

enum InvoiceStatus {
    PENDING
    PAID
    OVERDUE
}

enum TransmissionType {
    AUTOMATIC
    MANUAL
}

enum EntryType {
    DEBIT
    CREDIT
}

enum JobStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

enum ExperienceLevel {
    JUNIOR
    INTERMEDIATE
    SENIOR
}

enum InventoryStatus {
    IN_STOCK
    OUT_OF_STOCK
    LOW_STOCK
}

enum TransactionType {
    PURCHASE
    SALE
    ADJUSTMENT
}
