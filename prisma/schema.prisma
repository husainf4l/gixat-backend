generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CarStatus {
  CHECKED_IN
  DIAGNOSIS
  AWAITING_PARTS
  IN_SERVICE
  READY_FOR_PICKUP
  PICKED_UP
  CANCELLED
}

enum TransmissionType {
  Automatic
  Manual
}

enum ExperienceLevel {
  Junior
  Intermediate
  Senior
}

enum InventoryStatus {
  IN_STOCK
  OUT_OF_STOCK
  LOW_STOCK
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

model User {
  id        Int      @id @default(autoincrement())
  mobile    String   @unique
  name      String?
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Client {
  id          String         @id @default(cuid())
  companyName String?
  taxId       String?
  firstName   String
  lastName    String
  phoneNumber String
  email       String         @unique
  addressId   String?        @unique
  address     Address?       @relation(fields: [addressId], references: [id])
  notes       String?
  cars        Car[]
  accountId   Int
  account     ChartOfAccount @relation(fields: [accountId], references: [id])
}

model Address {
  id            String  @id @default(cuid())
  country       String
  city          String
  streetAddress String
  client        Client?
}

model Car {
  id               String           @id @default(cuid())
  makeId           String
  modelId          String
  year             Int
  vin              String?          @unique
  licenseNumber    String?
  status           CarStatus        @default(CHECKED_IN)
  transmissionType TransmissionType
  clientId         String
  client           Client           @relation(fields: [clientId], references: [id])
  make             Make             @relation(fields: [makeId], references: [id])
  model            Model            @relation(fields: [modelId], references: [id])
  notes            String?
  history          CarHistory[]
  inspections      Inspection[]
  jobCards         JobCard[]
}

model CarHistory {
  id      String   @id @default(cuid())
  carId   String
  date    DateTime
  event   String
  details String?
  car     Car      @relation(fields: [carId], references: [id])
}

model Inspection {
  id            String   @id @default(cuid())
  carId         String
  date          DateTime
  odoReading    Int
  color         String?
  imageUrl      String?
  notes         String?
  inspectorName String?
  car           Car      @relation(fields: [carId], references: [id])
}

model JobCard {
  id                 String        @id @default(cuid())
  carId              String
  date               DateTime
  description        String
  status             JobStatus
  cost               Float?
  car                Car           @relation(fields: [carId], references: [id])
  partsUsed          Part[]
  assignedTechnician Technician?   @relation(fields: [technicianId], references: [id])
  technicianId       String?
  journalEntryId     Int?
  journalEntry       JournalEntry? @relation(fields: [journalEntryId], references: [id])
}

model Part {
  id        String  @id @default(cuid())
  name      String
  quantity  Int
  cost      Float
  jobCard   JobCard @relation(fields: [jobCardId], references: [id])
  jobCardId String
}

model Technician {
  id              String          @id @default(cuid())
  name            String
  experienceLevel ExperienceLevel
  jobCards        JobCard[]
}

model Make {
  id     String  @id @default(cuid())
  name   String  @unique
  models Model[]
  cars   Car[]
}

model Model {
  id     String @id @default(cuid())
  name   String @unique
  makeId String
  make   Make   @relation(fields: [makeId], references: [id])
  cars   Car[]
}

model Category {
  id               Int             @id @default(autoincrement())
  name             String
  description      String?
  parentCategoryId Int?
  parentCategory   Category?       @relation("Subcategories", fields: [parentCategoryId], references: [id])
  subcategories    Category[]      @relation("Subcategories")
  accountId        Int?
  account          ChartOfAccount? @relation(fields: [accountId], references: [id])
  items            InventoryItem[]
}

model Supplier {
  id          Int             @id @default(autoincrement())
  name        String
  contactInfo String?
  address     String?
  items       InventoryItem[]
  accountId   Int
  account     ChartOfAccount  @relation(fields: [accountId], references: [id])
}

model InventoryItem {
  id               Int             @id @default(autoincrement())
  name             String
  quantity         Int
  description      String
  unitPrice        Float
  cost             Float
  sellingPrice     Float
  status           InventoryStatus
  reorderLevel     Int
  lastRestocked    DateTime?
  location         String?
  barcode          String?
  sku              String?
  unitOfMeasure    String?
  minOrderQuantity Int?
  batchNumber      String?
  categoryId       Int
  category         Category        @relation(fields: [categoryId], references: [id])
  supplierId       Int
  supplier         Supplier        @relation(fields: [supplierId], references: [id])

  ChartOfAccount ChartOfAccount[]
}

model ChartOfAccount {
  id               Int               @id @default(autoincrement())
  name             String
  accountCode      String            @unique
  accountType      AccountType
  parentAccountId  Int?
  parentAccount    ChartOfAccount?   @relation("SubAccounts", fields: [parentAccountId], references: [id])
  subAccounts      ChartOfAccount[]  @relation("SubAccounts")
  clients          Client[]
  suppliers        Supplier[]
  categories       Category[]
  inventoryItems   InventoryItem[]
  journalLineItems JournalLineItem[]
}

model JournalEntry {
  id          Int               @id @default(autoincrement())
  date        DateTime          @default(now())
  description String
  lineItems   JournalLineItem[]

  JobCard JobCard[]
}

model JournalLineItem {
  id             Int            @id @default(autoincrement())
  entryId        Int
  accountId      Int
  amount         Float
  type           EntryType // Debit or Credit
  JournalEntry   JournalEntry   @relation(fields: [entryId], references: [id])
  ChartOfAccount ChartOfAccount @relation(fields: [accountId], references: [id])
}

enum EntryType {
  DEBIT
  CREDIT
}
