generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EMPLOYEE
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CarStatus {
  CHECKED_IN // Car has arrived and is checked in
  DIAGNOSIS // Car is undergoing diagnostic checks
  AWAITING_PARTS // Parts are needed and awaiting arrival
  IN_SERVICE // Car is currently being serviced
  READY_FOR_PICKUP // Service completed, awaiting pickup
  PICKED_UP // Car has been picked up by the client
  CANCELLED // Service was cancelled
}

model User {
  id        Int      @id @default(autoincrement())
  mobile    String   @unique
  name      String?
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

model Client {
  id          String   @id @default(cuid())
  companyName String?
  taxId       String?
  firstName   String
  lastName    String
  phoneNumber String
  email       String   @unique
  addressId   String?  @unique
  address     Address? @relation(fields: [addressId], references: [id])
  notes       String?
  cars        Car[]
}

model Address {
  id            String  @id @default(cuid())
  country       String
  city          String
  streetAddress String
  client        Client?
}

model Car {
  id               String           @id @default(cuid())
  makeId           String
  modelId          String
  year             Int
  vin              String?          @unique
  licenseNumber    String?
  status           CarStatus        @default(CHECKED_IN)
  transmissionType TransmissionType
  clientId         String
  client           Client           @relation(fields: [clientId], references: [id])
  make             Make             @relation(fields: [makeId], references: [id]) // Relation to Make
  model            Model            @relation(fields: [modelId], references: [id]) // Relation to Model
  notes            String?
  history          CarHistory[]
  inspections      Inspection[]
  jobCards         JobCard[]
}

model CarHistory {
  id      String   @id @default(cuid())
  carId   String
  date    DateTime
  event   String
  details String?
  car     Car      @relation(fields: [carId], references: [id])
}

model Inspection {
  id            String   @id @default(cuid())
  carId         String
  date          DateTime
  odoReading    Int
  color         String?
  imageUrl      String?
  notes         String?
  inspectorName String?
  car           Car      @relation(fields: [carId], references: [id])
}

model JobCard {
  id                 String      @id @default(cuid())
  carId              String
  date               DateTime
  description        String
  status             JobStatus
  cost               Float?
  car                Car         @relation(fields: [carId], references: [id])
  partsUsed          Part[]
  assignedTechnician Technician? @relation(fields: [technicianId], references: [id])
  technicianId       String?
}

model Part {
  id        String  @id @default(cuid())
  name      String
  quantity  Int
  cost      Float
  jobCard   JobCard @relation(fields: [jobCardId], references: [id])
  jobCardId String
}

// Technician model
model Technician {
  id              String          @id @default(cuid())
  name            String
  experienceLevel ExperienceLevel
  jobCards        JobCard[]
}

model Make {
  id     String  @id @default(cuid())
  name   String  @unique
  models Model[]
  cars   Car[]
}

model Model {
  id     String @id @default(cuid())
  name   String @unique
  makeId String
  make   Make   @relation(fields: [makeId], references: [id])
  cars   Car[] // Connects to Car model
}

enum TransmissionType {
  Automatic
  Manual
}

enum ExperienceLevel {
  Junior
  Intermediate
  Senior
}
